{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","main","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","datebuilder","Date","Math","round","temp","humidity","wind","speed","description","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yKAEMA,EACC,mCADDA,EAEE,0CAqEOC,MAlEf,WAEE,MAAyBC,mBAAS,IAAlC,mBAAMC,EAAN,KAAaC,EAAb,KACA,EAA6BF,mBAAS,IAAtC,mBAAMG,EAAN,KAAeC,EAAf,KA4BA,OACE,qBAAKC,UAAY,MAAjB,SACI,iCACI,sBAAKA,UAAY,aAAjB,UACI,uBAAOC,KAAO,OACdD,UAAY,aACZE,YAAc,YACdC,SAAY,SAAAC,GAAC,OAAIP,EAASO,EAAEC,OAAOC,QACnCA,MAASV,EACTW,WAnCG,SAAAC,GACE,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAIjB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDkB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJf,EAAWe,GACXjB,EAAS,IAETkB,QAAQC,IAAIF,SA6BN,wBAAQd,UAAY,gBACpBC,KAAO,SADP,SAEC,0BAAUgB,KAAK,+BAIK,oBAAhBnB,EAAQoB,KACjB,gCACE,sBAAKlB,UAAY,eAAjB,UACI,sBAAKA,UAAY,WAAjB,UAA6BF,EAAQmB,KAArC,KAA6CnB,EAAQqB,IAAIC,WACzD,qBAAKpB,UAAY,OAAjB,SAjCI,SAACqB,GACnB,IAGIC,EAFO,CAAC,SAAU,UAAW,YAAa,WAAY,SAAU,WAAY,UAEjED,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAwBKE,CAAY,IAAIC,WAE7C,sBAAK/B,UAAY,cAAjB,UACE,sBAAKA,UAAY,OAAjB,0BAAsCgC,KAAKC,MAAMnC,EAAQoB,KAAKgB,MAA9D,YACA,sBAAKlC,UAAY,WAAjB,uBAAuCF,EAAQoB,KAAKiB,SAApD,QACA,sBAAKnC,UAAY,OAAjB,yBAAqCgC,KAAKC,MAAMnC,EAAQsC,KAAKC,OAA7D,WACA,sBAAKrC,UAAY,UAAjB,0BAAyCF,EAAQA,QAAQ,GAAGwC,qBAEtD,sBAAKtC,UAAY,UAAjB,iCAA+C,uBAA/C,gCCvDPuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.07e1794d.chunk.js","sourcesContent":["import { object } from 'prop-types';\nimport React, { useState } from 'react';\nconst api = {\n  key: \"47dc28e66d7308fd83e60025c403d365\",\n  base: \"http://api.openweathermap.org/data/2.5/\",\n}\n\nfunction App() {\n\n  const[query, setQuery] = useState('');\n  const[weather, setWeather] = useState({});\n \n    const search = evt =>{\n      if(evt.key === \"Enter\" ){\n        fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          \n          console.log(result);\n      });\n    }\n\n  }\n\n  const datebuilder = (d) =>{\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className={ 'App'}>\n        <main>\n            <div className = \"search-box\">\n                <input type = \"text\"\n                className = \"search-bar\"\n                placeholder = \"Search...\"\n                onChange = {e => setQuery(e.target.value)}\n                value = {query}\n                onKeyPress = {search}\n                />\n                <button className = \"search-button\" \n                type = \"submit\"\n                ><ion-icon name=\"search-circle-outline\" ></ion-icon>\n                </button>\n            </div>\n            \n            {(typeof weather.main != \"undefined\") ? (\n            <div>\n              <div className = \"location-box\">\n                  <div className = \"location\">{weather.name}, {weather.sys.country}</div>\n                  <div className = \"date\">{datebuilder(new Date())}</div>\n              </div>\n              <div className = \"weather-box\">\n                <div className = \"temp\">Temperature: {Math.round(weather.main.temp)} Â°C</div>\n                <div className = \"humidity\">Humidity: {weather.main.humidity} %</div>\n                <div className = \"wind\">Wind Speed: {Math.round(weather.wind.speed)} km/h</div>\n                <div className = \"weather\">Description: {weather.weather[0].description}</div>\n              </div>  \n          </div> ) : (<div className = \"welcome\"> Welcome to Edgar's <br/> Weather Application</div>)}\n        </main>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}